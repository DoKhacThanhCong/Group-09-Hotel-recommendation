import streamlit as st
import pandas as pd
from filter import filter_by_location, filter_by_budget
from recommend import calculate_scores_and_explain 

# Thi·∫øt l·∫≠p giao di·ªán Web 
st.set_page_config(layout="wide")
st.title("ü§ñ H·ªá th·ªëng G·ª£i √Ω Du l·ªãch Th√¥ng minh üè®")
st.write("M√¥ ph·ªèng d·ª± √°n - T√≠ch h·ª£p L·ªçc (TV3) v√† AI (TV4)")

# T·∫£i d·ªØ li·ªáu 
@st.cache_data
def load_data(csv_path):
    try:
        df = pd.read_csv(csv_path)
        return df
    except FileNotFoundError:
        st.error(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file {csv_path}. H√£y ƒë·∫£m b·∫£o file n√†y ·ªü c√πng th∆∞ m·ª•c.")
        return None

base_data = load_data("hotels.csv")

if base_data is not None:

    # Giao di·ªán Form (Sidebar) 
    st.sidebar.header("B·ªô l·ªçc c·ªßa b·∫°n")
    
    USER_LOCATION = st.sidebar.text_input("B·∫°n mu·ªën t√¨m kh√°ch s·∫°n ·ªü th√†nh ph·ªë n√†o?", "Hanoi")
    
    USER_BUDGET = st.sidebar.slider("Ng√¢n s√°ch t·ªëi ƒëa c·ªßa b·∫°n (VND)?", 
                                     min_value=0, 
                                     max_value=10000000, 
                                     value=2000000, 
                                     step=100000)
    
    USER_MIN_STARS = st.sidebar.number_input("B·∫°n mu·ªën kh√°ch s·∫°n t·ªëi thi·ªÉu m·∫•y sao?", 1, 5, 3)
    
    st.sidebar.subheader("S·ªü th√≠ch ƒë·∫∑c bi·ªát (ph·∫ßn AI):")
    USER_POOL = st.sidebar.checkbox("C√≥ h·ªì b∆°i (Pool)")
    USER_BUFFET = st.sidebar.checkbox("C√≥ buffet s√°ng")
    USER_TEXT = st.sidebar.text_area("H√£y m√¥ t·∫£ th√™m...", "T√¥i th√≠ch n∆°i y√™n tƒ©nh, d·ªãch v·ª• t·ªët")

    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m n√∫t
    if st.sidebar.button("üîç T√¨m ki·∫øm Kh√°ch s·∫°n"):
        
        
        print("--- ƒêang x·ª≠ l√Ω y√™u c·∫ßu tr√™n Web ---")
        filtered_data = filter_by_location(base_data, USER_LOCATION)
        filtered_data = filter_by_budget(filtered_data, USER_BUDGET)
        
        st.write(f"T√¨m th·∫•y **{len(filtered_data)}** kh√°ch s·∫°n ph√π h·ª£p v·ªõi V·ªã tr√≠ v√† Ng√¢n s√°ch.")

        
        all_user_preferences = {
            'min_stars': USER_MIN_STARS,
            'pool': USER_POOL,
            'buffet': USER_BUFFET,
            'text': USER_TEXT
        }

        final_results_sorted, explanation = calculate_scores_and_explain(
            filtered_data.copy(), 
            all_user_preferences
        )

        #Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        
        # Hi·ªÉn th·ªã gi·∫£i th√≠ch c·ªßa AI 
        st.info(f"AI gi·∫£i th√≠ch: {explanation}")

        st.subheader("TOP 3 G·ª¢I √ù PH√ô H·ª¢P NH·∫§T ")
        
        if final_results_sorted.empty:
            st.warning("R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n n√†o ph√π h·ª£p v·ªõi t·∫•t c·∫£ ti√™u ch√≠.")
        else:
            top_3 = final_results_sorted.head(3)
            
            for index, row in top_3.iterrows():
                st.markdown(f"### {row['name']} ({row['stars']} sao)")
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.image(row['image_url'], caption=f"{row['name']}")
                with col2:
                    st.markdown(f"**Gi√°:** `{row['price']:,} VND`")
                    st.markdown(f"**Rating:** `{row['rating']}/5`")
                    st.markdown(f"**ƒêi·ªÉm g·ª£i √Ω (AI):** `{row['recommend_score']:.2f}`")
                    st.markdown(f"**ƒê√°nh gi√°:** *{row['review']}*")
                st.divider()